import { ForwardedRef, HTMLAttributes, RefObject } from 'react';
export interface AccordionSectionProps extends HTMLAttributes<HTMLDivElement> {
    headingLevel?: number;
    label: string;
    body: any;
    expanded?: boolean;
    disabled?: boolean;
    section?: boolean;
    onActivate?: Function;
    onButtonFocus?: Function;
    onButtonBlur?: Function;
    buttonRef?: RefObject<HTMLButtonElement>;
}
export declare const AccordionSection: import("react").ForwardRefExoticComponent<AccordionSectionProps & import("react").RefAttributes<HTMLDivElement>>;
export interface AccordionProps extends HTMLAttributes<HTMLDivElement> {
    headingLevel?: number;
    heading?: string;
    group?: false;
}
export declare const Accordion: import("react").ForwardRefExoticComponent<AccordionProps & {
    children?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const useAccordion: <T>(sections: T[], ref: RefObject<HTMLDivElement | undefined>) => {
    ref: RefObject<HTMLDivElement | undefined>;
    refs: RefObject<HTMLDivElement>[];
    buttonRefs: RefObject<HTMLButtonElement>[];
    activeElement: null;
    sections: T[];
    focusNextSection: (activeElement: RefObject<HTMLDivElement>) => void;
    focusFirstSection: () => void;
    focusPreviousSection: (activeElement: RefObject<HTMLDivElement>) => void;
    focusLastSection: () => void;
};
interface AccordionSectionProviderProps {
    defaultExpanded?: boolean;
    expanded?: boolean;
}
export declare const useAccordionSection: ({ defaultExpanded, expanded }: AccordionSectionProviderProps, ref: ForwardedRef<HTMLDivElement>) => {
    ref: ForwardedRef<HTMLDivElement>;
    expanded: boolean;
};
interface AccordionProviderProps {
    sections: AccordionSectionProps[];
}
export declare const AccordionProvider: {
    ({ sections }: AccordionProviderProps): JSX.Element;
    displayName: string;
};
export {};
